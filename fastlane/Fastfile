fastlane_version "2.39.1"

default_platform :ios

platform :ios do
  before_all do
  end

  desc "Deploy changes to iOS [Staging]"
  lane :deploy do |options|
    deploy_ios(options)
  end

  desc "Promote iOS [Staging -> Release]"
  lane :promote do
    promote_ios()
  end

  lane :build do
    gym(
      scheme: "UenoInternalApp",
      workspace: "ios/UenoInternalApp.xcworkspace",
      output_directory: "ios/build",
      configuration: "Staging"
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  lane :beta do
    increment_build_number(
      workspace: "ios/UenoInternalApp.xcworkspace"
    )
    match(
      type: "appstore",
      git_url: "***REMOVED***",
      readonly: true
    )
    gym(
      scheme: "UenoInternalApp",
      workspace: "ios/UenoInternalApp.xcworkspace",
      output_directory: "ios/build",
      configuration: "Staging"
    )
    pilot(skip_submission: true)
  end

  desc "Build and deploy a new version to the App Store"
  lane :release do
    match(
      type: "appstore",
      git_url: "***REMOVED***",
      readonly: true
    )
    gym(
      scheme: "UenoInternalApp",
      workspace: "ios/UenoInternalApp.xcworkspace",
      output_directory: "ios/build"
    )
    deliver(force: true)
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end
end


platform :android do

  before_all do
  end

  desc "Deploy changes to Android [Staging]"
  lane :deploy do |options|
    deploy_android(options)
  end

  desc "Promote Android [Staging -> Release]"
  lane :promote do
    promote_android()
  end

  desc "Clean the android project"
  lane :clean do
    # Clean the project
    gradle(
      task: 'clean',
      project_dir: "android"
    )
  end

  desc "Build and upload APK to the Play Store (alpha)"
  lane :alpha do
    clean()
    # Build project
    gradle(
      task: "assemble",
      build_type: "ReleaseStaging",
      project_dir: "android"
    )
    # Upload the APK to the Play Store (alpha)
    supply(
      track: "alpha",
      apk: "android/app/build/outputs/apk/app-releaseStaging.apk"
    )
  end

  desc "Build and upload APK to the Play Store"
  lane :release do
    # Clean the project
    gradle(
      task: 'clean',
      project_dir: "android"
    )
    # Build project
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "android"
    )
    # Upload the APK to the Play Store (alpha)
    supply(
      track: "alpha",
      apk: "android/app/build/outputs/apk/app-release.apk"
    )
  end
  after_all do |lane|
  end

  error do |lane, exception|
  end

end

desc "Deploy changes to iOS and Android [Staging]"
lane :deploy do |options|
  deploy_ios(options)
  deploy_android(options)
end

desc "Promote iOS and Android [Staging -> Release]"
lane :promote do
  promote_ios()
  promote_android()
end

private_lane :deploy_ios do |options|
  code_push_release_react(
    app_name: "ueno-internal-app-ios",
    platform: "ios",
    deployment: "Staging -x",
    description: options[:description],
    dry_run: true
  )
end

private_lane :deploy_android do |options|
  code_push_release_react(
    app_name: "ueno-internal-app-android",
    platform: "android",
    deployment: "Staging -x",
    description: options[:description],
    dry_run: true
  )
end

private_lane :promote_ios do
  code_push_promote(
    app_name: "ueno-internal-app-ios",
    dry_run: true
  )
end

private_lane :promote_android do
  code_push_promote(
    app_name: "ueno-internal-app-android",
    dry_run: true
  )
end
